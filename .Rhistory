shiny::runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp()
runApp()
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
dat <- rnorm(1:1000)
localMaxima <- function(dat) {
local.max <- diff(c(-Inf, dat)) > 0L
rle(local.max)$lengths
local.max <- cumsum(rle(local.max)$lengths)
local.max <- local.max[seq.int(1L, length(local.max), 2L)]
if (x[[1]] == x[[2]]) {
local.max <- local.max[-1]
}
return(local.max)
}
localMinima <- function(dat) {
local.min <- diff(c(Inf, dat)) > 0L
rle(local.min)$lengths
local.min <- cumsum(rle(local.min)$lengths)
local.min <- local.min[seq.int(1L, length(local.min), 2L)]
if (x[[1]] == x[[2]]) {
local.min <- local.min[-1]
}
return(local.min)
}
localMaxima(dat)
library(shiny)
localMaxima <- function(dat) {
local.max <- diff(c(-Inf, dat)) > 0L
rle(local.max)$lengths
local.max <- cumsum(rle(local.max)$lengths)
local.max <- local.max[seq.int(1L, length(local.max), 2L)]
if (dat[[1]] == dat[[2]]) {
local.max <- local.max[-1]
}
return(local.max)
}
localMinima <- function(dat) {
local.min <- diff(c(Inf, dat)) > 0L
rle(local.min)$lengths
local.min <- cumsum(rle(local.min)$lengths)
local.min <- local.min[seq.int(1L, length(local.min), 2L)]
if (dat[[1]] == dat[[2]]) {
local.min <- local.min[-1]
}
return(local.min)
}
localMaxima(dat)
plot(density(dat))
localMaxima(density(dat))
nn <- density(dat)
nn
nn$y
nn <- nn$y
localMaxima(nn)
dat.dens <- density(dat)$y
dat.dens
localMaxima(dat.dens)
localMinima(dat.dens)
?diff
localMetric <- function(dat, type.metrix) {
if(type.metrix == min){
x = -Inf
} else {
x = Inf
}
local.metrix <- diff(c(x, dat)) > 0L
rle(local.metrix)$lengths
local.metrix <- cumsum(rle(local.metrix)$lengths)
local.metrix <- local.metrix[seq.int(1L, length(local.metrix), 2L)]
if (dat[[1]] == dat[[2]]) {
local.metrix <- local.metrix[-1]
}
return(local.metrix)
}
localMetric(dat.dens, min)
dat.dens
x = -Inf
local.metrix <- diff(c(x, dat.dens)) > 0L
local.metrix
localMetric <- function(dat, type.metrix) {
if(type.metrix == "min"){
x = -Inf
} else {
x = Inf
}
local.metrix <- diff(c(x, dat)) > 0L
rle(local.metrix)$lengths
local.metrix <- cumsum(rle(local.metrix)$lengths)
local.metrix <- local.metrix[seq.int(1L, length(local.metrix), 2L)]
if (dat[[1]] == dat[[2]]) {
local.metrix <- local.metrix[-1]
}
return(local.metrix)
}
localMetric(dat.dens, min)
localMetric <- function(dat, type.metrix) {
if(type.metrix = "min"){
x = -Inf
} else {
x = Inf
}
local.metrix <- diff(c(x, dat)) > 0L
rle(local.metrix)$lengths
local.metrix <- cumsum(rle(local.metrix)$lengths)
local.metrix <- local.metrix[seq.int(1L, length(local.metrix), 2L)]
if (dat[[1]] == dat[[2]]) {
local.metrix <- local.metrix[-1]
}
return(local.metrix)
}
localMetric <- function(dat, type.metrix) {
if(type.metrix = "min"){
x = -Inf
} else {
x = Inf
}
local.metrix <- diff(c(x, dat)) > 0L
rle(local.metrix)$lengths
local.metrix <- cumsum(rle(local.metrix)$lengths)
local.metrix <- local.metrix[seq.int(1L, length(local.metrix), 2L)]
if (dat[[1]] == dat[[2]]) {
local.metrix <- local.metrix[-1]
}
return(local.metrix)
}
localMetric <- function(dat, type.metrix) {
if(type.metrix == min){
x = -Inf
} else {
x = Inf
}
local.metrix <- diff(c(x, dat)) > 0L
rle(local.metrix)$lengths
local.metrix <- cumsum(rle(local.metrix)$lengths)
local.metrix <- local.metrix[seq.int(1L, length(local.metrix), 2L)]
if (dat[[1]] == dat[[2]]) {
local.metrix <- local.metrix[-1]
}
return(local.metrix)
}
localMetric <- function(dat, type.metrix) {
if(type.metrix = min){
x = -Inf
} else {
x = Inf
}
local.metrix <- diff(c(x, dat)) > 0L
rle(local.metrix)$lengths
local.metrix <- cumsum(rle(local.metrix)$lengths)
local.metrix <- local.metrix[seq.int(1L, length(local.metrix), 2L)]
if (dat[[1]] == dat[[2]]) {
local.metrix <- local.metrix[-1]
}
return(local.metrix)
}
localMetric <- function(dat, type.metrix) {
if(type.metrix == min){
x = -Inf
} else {
x = Inf
}
local.metrix <- diff(c(x, dat)) > 0L
rle(local.metrix)$lengths
local.metrix <- cumsum(rle(local.metrix)$lengths)
local.metrix <- local.metrix[seq.int(1L, length(local.metrix), 2L)]
if (dat[[1]] == dat[[2]]) {
local.metrix <- local.metrix[-1]
}
return(local.metrix)
}
localMetric <- function(dat, type.metrix) {
if(type.metrix == "min"){
x = -Inf
} else {
x = Inf
}
local.metrix <- diff(c(x, dat)) > 0L
rle(local.metrix)$lengths
local.metrix <- cumsum(rle(local.metrix)$lengths)
local.metrix <- local.metrix[seq.int(1L, length(local.metrix), 2L)]
if (dat[[1]] == dat[[2]]) {
local.metrix <- local.metrix[-1]
}
return(local.metrix)
}
type.metrix <- "min"
type.metrix == "min"
localMetric <- function(dat, type.metrix) {
if(type.metrix == "min"){
x = -Inf
} else {
x = Inf
}
local.metrix <- diff(c(x, dat)) > 0L
rle(local.metrix)$lengths
local.metrix <- cumsum(rle(local.metrix)$lengths)
local.metrix <- local.metrix[seq.int(1L, length(local.metrix), 2L)]
if (dat[[1]] == dat[[2]]) {
local.metrix <- local.metrix[-1]
}
return(local.metrix)
}
localMetric(dat.dens, min)
localMetric(dat.dens, "min")
localMetric(dat.dens, "max")
localMetric(dat.dens, "max")
localMetric <- function(dat, type.metrix) {
if(type.metrix == "max"){
x = -Inf
} else {
x = Inf
}
local.metrix <- diff(c(x, dat)) > 0L
rle(local.metrix)$lengths
local.metrix <- cumsum(rle(local.metrix)$lengths)
local.metrix <- local.metrix[seq.int(1L, length(local.metrix), 2L)]
if (dat[[1]] == dat[[2]]) {
local.metrix <- local.metrix[-1]
}
return(local.metrix)
}
localMetric(dat.dens, "max")
plot(dat.dens)
plot(dat.dens, type = "l")
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
runApp('splitCell_with_modules')
save.image()
